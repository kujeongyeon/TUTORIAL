package tutorial;

public class object4 {
	/*
	 *  유효범위
	 *  수많은 시행착오를 거쳐 만든 부품으로써의 가치를 높이는 규칙
	 *  = 전역변수와 지역변수로 나뉘서 좀 더 관리하기 편하도록 한 것 
	 */
	static void a () {
		int i = 0;
	}
	
	static int j;
	
	static void b () {
		 j = 0;
	}
	
	/*
	 * 원래는 이런식으로 b()메소드 내부의 j 를 int 로 초기화 해주지 않으면 
	 * 반복문에서 무한 반복이 일어나는데... 안일어나는걸로 보아 개선이 됬나봄 확인해보기
	 * 
	 * 중요한건 메소드 내부에 선언된 변수가 클래스 아래에 선언된 변수보다 우선순위가 높다는것.
	 * 이름이 같으면 메소드 내부의 변수를 먼저 찾는다는뜻
	 * 지역적인 것이 전역적인 것보다 우선순위가 높다 = 특수한것이 전체적인 것보다 우선순위가 높다
	 * 지역변수 = 메소드 내부의 변수 반복문 조건문 내의 변수
	 */
	
	static int o = 5;
	
	static void c() {
		int o = 10;
		d();
	}
	
	static void d() {
		System.out.println(o);
	}
	
	/*
	 *  c(); 를 호툴하면 결과는 10일까 5일까? 정답은 5다.
	 *  메소드 a()의 지역변수가 아닌 메소드 d()의 전역변수(클래스변수)를 사용함
	 *  이러한 방식을 정적스코프 혹은 렉시컬 스코프라고 함
	 *  정적 스코프 = 사용된 시점에서의 유효범위가 아니라 정의된 시점에서의 유효범위를 사용하는것
	 *  
	 *  그러면 동적스코프도 있겠지요
	 *  만약 d() 의값이 10이면 메소드 a()의 유효범위에 속하게 됨 걍 영향을 받는다고 생각
	 *  자바는 이런 동적스코프를 허용하지 않는다
	 */
	
	public static void main(String[] args) {
		
		for (int i=0; i<5; i++) {
			a(); // 메소드 a를 호출함 
			
			/*
			 *
			 * 만약 a의 i를 for문의 i(외부의 i)가 덮어 쓰게 된다면?
			 * a를 호출할 때 마다 i가 0이 될테니 무한 반복에 빠지겠지??? 그렇게 안하려면 변수이름을
			 * 바꿔줘야 되는데 그건 부품으로써의 역할 (은닉화,캡슐화)에 충실하지 못하다. 
			 * 좋은 부품은 그 내부가 어떻게 생겼는지 모르고도 사용하는 방법만 안다면 쉽게 쓸수있어야하는데
			 * 이름을 바꿔주는 방식은 메소드 내부의 변수를 찾아내서 이름을 변경해야됨 복잡함
			 * 그래서 아예 외부의 변수에 영향을 받지 않도록 정해둔것임.
			 */
			System.out.println(i);
		}
		
		for (int j=0; j<5; j++) {
			b();
			System.out.println(j);
		}
		
		c();
	}

}
